import numpy as np
import tensorflow as tf
from tensorflow.keras import layers
import gym  # Using Gym for environment simulation

class LearningAgent:
    def __init__(self, state_size, action_size, learning_rate=0.001):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate
        self.memory = []  # Store past experiences
        
        # Build the model (a simple neural network for Q-value function)
        self.model = self._build_model()

    def _build_model(self):
        model = tf.keras.Sequential()
        model.add(layers.Dense(24, input_dim=self.state_size, activation='relu'))
        model.add(layers.Dense(24, activation='relu'))
        model.add(layers.Dense(self.action_size, activation='linear'))  # Output Q-values for each action
        model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(learning_rate=self.learning_rate))
        return model
    
    def act(self, state):
        state = np.reshape(state, [1, self.state_size])
        q_values = self.model.predict(state)
        return np.argmax(q_values[0])  # Choose action with highest Q-value
    
    def train(self, state, action, reward, next_state, done):
        state = np.reshape(state, [1, self.state_size])
        next_state = np.reshape(next_state, [1, self.state_size])
        
        # Get the Q-values for the current state and next state
        q_values = self.model.predict(state)
        next_q_values = self.model.predict(next_state)
        
        # Update the Q-value for the chosen action
        target = reward
        if not done:
            target += 0.95 * np.max(next_q_values)  # Discount future rewards
        
        q_values[0][action] = target
        
        # Train the model with the updated Q-values
        self.model.fit(state, q_values, epochs=1, verbose=0)
        
    def save(self, filename):
        self.model.save(filename)
        
    def load(self, filename):
        self.model = tf.keras.models.load_model(filename)

def train_agent(env, agent, episodes=1000):
    for e in range(episodes):
        state = env.reset()
        done = False
        total_reward = 0
        while not done:
            action = agent.act(state)
            next_state, reward, done, _ = env.step(action)
            agent.train(state, action, reward, next_state, done)
            state = next_state
            total_reward += reward
        print(f"Episode {e+1}/{episodes} - Total Reward: {total_reward}")

if __name__ == "__main__":
    # Create the environment (you can choose any Gym environment)
    env = gym.make('CartPole-v1')
    
    state_size = env.observation_space.shape[0]
    action_size = env.action_space.n
    
    agent = LearningAgent(state_size, action_size)

    # Train the agent
    train_agent(env, agent, episodes=1000)
    
    # Save the model
    agent.save('agent_model.h5')
